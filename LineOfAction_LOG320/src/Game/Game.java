package Game;

import ArtificialInteligence.*;
import Server.PositionDecoder;
import java.util.Stack;

public class Game {

    public Board gameBoard;
    private CpuPlayer cpuPlayer;
    private int serverPlayer;
    private MoveManager moveManager;
    private Stack<Move> moveHistory = new Stack<>();

    public Game(int[][] board, int color) {
        gameBoard = new Board(board);
        moveManager = new MoveManager(gameBoard);
        cpuPlayer = new CpuPlayer(color, this);
        if (cpuPlayer.getCpuColor() == 2) {
            serverPlayer = 4;
        } else {
            serverPlayer = 2;
        }
    }

    public int getServerPlayer() {
        return serverPlayer;
    }

    /**
     * This method plays move made by the server and the player. Keeps the board up-to date with the server's game state
     *
     * @param color
     * @param moveServeur
     */
    public void play(int color, Move moveServeur) {
        gameBoard.movePawn(color, moveServeur);
        moveHistory.add(moveServeur);
    }

    /**
     * This method is the same as play but under a different name for the AI's alphaBeta node generation.
     * New method was creating in case we need to implement something different for the AI's move generation.
     *
     * @param color
     * @param moveTemp
     */
    public void tempPlay(int color, Move moveTemp) {
        gameBoard.movePawn(color, moveTemp);
        moveHistory.add(moveTemp);
    }

    /**
     * This method un-plays a move. Used primarly for un-doing moves generated by the alphaBeta node tree made by the ai
     */
    public void unPlay(int color) {
        Move move = moveHistory.pop();
        gameBoard.undoMovePawn(color, move);
    }

    /**
     * This method plays the Ai move and sends the move information to the server
     *
     * @return
     */
    public String cpuPlay() throws InterruptedException {
        // Starts the search
        Thread searchThread = new Thread(cpuPlayer);
        searchThread.start();

        // Lets the search run a maximum amount of time
        Thread.sleep(4700);
        cpuPlayer.stopSearchAlphaBeta();

        String move = cpuPlayer.getBestMove();
        char[] moveChar = move.toCharArray();

        Position aiActualPosition = PositionDecoder.encode((moveChar[0]) + String.valueOf(moveChar[1]));
        Position aiPlayedPosition = PositionDecoder.encode((moveChar[2]) + String.valueOf(moveChar[3]));
        Move moveAi = new Move(aiActualPosition, aiPlayedPosition);

        System.out.println(move);
        play(cpuPlayer.getCpuColor(), moveAi);
        return move;
    }

}
